/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.github.shnjtk.aws.lambda.java.s3.sample;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.services.s3.model.S3ObjectInputStream;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.InvalidParameterException;
import java.util.HashMap;
import java.util.Map;

public class SampleFunction implements RequestHandler<Map<String, Object>, Map<String, Object>> {

    /*
     * Required input parameter keys.
     */
    private static final String INPUT_KEY_SOURCE_BUCKET = "SourceBucket";
    private static final String INPUT_KEY_SOURCE_OBJECT_KEY = "SourceObjectKey";
    private static final String INPUT_KEY_DEST_BUCKET = "DestBucket";
    private static final String INPUT_KEY_DEST_OBJECT_KEY = "DestObjectKey";

    /*
     * Function parameters.
     */
    private final int READ_BUF_SIZE = 1024;

    private AmazonS3 s3;

    @Override
    public Map<String, Object> handleRequest(Map<String, Object> input, Context context) {
        Map<String, Object> output = new HashMap<>();

        try {
            validateInput(input);

            s3 = AmazonS3ClientBuilder.defaultClient();

            final String sourceBucket = (String)input.get(INPUT_KEY_SOURCE_BUCKET);
            final String sourceObjectKey = (String)input.get(INPUT_KEY_SOURCE_OBJECT_KEY);

            File sourceFile = getObject(sourceBucket, sourceObjectKey);

            final String destBucket = (String)input.get(INPUT_KEY_DEST_BUCKET);
            final String destObjectKey = (String)input.get(INPUT_KEY_DEST_OBJECT_KEY);

            putObject(sourceFile, destBucket, destObjectKey);

            output.put("Result", "Success");
        } catch (Exception e) {
            output.put("Result", "Failure");
            output.put("Reason", e.getMessage());
        }

        return output;
    }

    private void validateInput(Map<String, Object> input) throws IllegalArgumentException {
        final String[] keys = {
                INPUT_KEY_SOURCE_BUCKET,
                INPUT_KEY_SOURCE_OBJECT_KEY,
                INPUT_KEY_DEST_BUCKET,
                INPUT_KEY_DEST_OBJECT_KEY,
        };

        for (String key : keys) {
            if (!input.containsKey(key)) {
                throw new IllegalArgumentException("Missing required key: " + key);
            }
        }
    }

    private File getObject(String bucket, String objectKey) throws IOException {
        File tmpFile = openTempFile(objectKey);

        try {
            S3Object obj = s3.getObject(bucket, objectKey);
            S3ObjectInputStream s3is = obj.getObjectContent();
            FileOutputStream fos = new FileOutputStream(tmpFile);
            byte[] readBuf = new byte[READ_BUF_SIZE];
            int readLen = 0;
            while ((readLen = s3is.read(readBuf)) > 0) {
                fos.write(readBuf, 0, readLen);
            }
            s3is.close();
            fos.close();
        } catch (IOException e) {
            throw e;
        }

        return tmpFile;

    }

    private void putObject(File file, String bucket, String objectKey) {
        s3.putObject(bucket, objectKey, file);
    }

    private File openTempFile(String objectKey) throws IOException {
        Path tmpPath = Files.createTempFile(String.valueOf(Paths.get("/tmp")), "-tmp");
        File tmpFile = tmpPath.toFile();
        return tmpFile;
    }
}
